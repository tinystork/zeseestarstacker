                except FileNotFoundError:
                    pass
                except Exception as e:
                    self.update_progress(
                        f"‚ö†Ô∏è Erreur suppression ancien stack: {e}", "WARN"
                    )

        self.update_progress(f"üíæ Saved {os.path.basename(out_path)}")

        if hasattr(self, "gui") and getattr(self.gui, "last_stack_path", None):
            try:
                self.gui.last_stack_path.set(out_path)
            except Exception:
                pass

    ################################################################################################################################################

    def cleanup_temp_reference(self):
        if self.output_folder is None:  # <--- AJOUTER CETTE V√âRIFICATION
            logger.debug(
                "WARN QM [cleanup_temp_reference]: self.output_folder non d√©fini, nettoyage r√©f√©rence annul√©."
            )
            return
        try:
            aligner_temp_folder = os.path.join(self.output_folder, "temp_processing")
            if os.path.isdir(aligner_temp_folder):
                ref_fit = os.path.join(aligner_temp_folder, "reference_image.fit")
                ref_png = os.path.join(aligner_temp_folder, "reference_image.png")
                deleted_ref = 0
                if os.path.exists(ref_fit):
                    try:
                        os.remove(ref_fit)
                        deleted_ref += 1
                    except Exception:
                        pass
                if os.path.exists(ref_png):
                    try:
                        os.remove(ref_png)
                        deleted_ref += 1
                    except Exception:
                        pass
                if deleted_ref > 0:
                    self.update_progress(
                        f"üßπ Fichier(s) r√©f√©rence temporaire(s) supprim√©(s)."
                    )
                try:
                    os.rmdir(aligner_temp_folder)
                except OSError:
                    pass
        except Exception as e:
            self.update_progress(f"‚ö†Ô∏è Erreur nettoyage r√©f√©rence temp: {e}")

    ############################################################################
    ####################################################################

    def _cleanup_memmap_files(self):
        """Supprime le dossier memmap_accumulators en fin de traitement."""
        if self.output_folder is None:
            logger.debug(
                "WARN QM [_cleanup_memmap_files]: self.output_folder non d√©fini, nettoyage annul√©."
            )
            return
        memmap_dir = os.path.join(self.output_folder, "memmap_accumulators")
        if os.path.isdir(memmap_dir):
            try:
                shutil.rmtree(memmap_dir)
                self.update_progress(
                    f"üßπ Dossier memmap supprim√©: {os.path.basename(memmap_dir)}"
                )
            except Exception as e:
                self.update_progress(
                    f"‚ö†Ô∏è Erreur suppression dossier memmap ({os.path.basename(memmap_dir)}): {e}"
                )
        reproject_dir = os.path.join(
            self.temp_folder or self.output_folder, "reproject_memmap"
        )
        if os.path.isdir(reproject_dir):
            try:
                shutil.rmtree(reproject_dir)
                self.update_progress(
                    f"üßπ Dossier memmap supprim√©: {os.path.basename(reproject_dir)}"
                )
            except Exception:
                pass

    ################################################################################################################################################

    def add_folder(self, folder_path):
        if not self.processing_active:
            self.update_progress(
                "‚ìò Impossible d'ajouter un dossier, traitement non actif."
            )
            return False
        if self.reproject_between_batches:
            self.update_progress("‚ö†Ô∏è Reprojection active : ajout de dossier d√©sactiv√©")
            return False
        abs_path = os.path.abspath(folder_path)
        if not os.path.isdir(abs_path):
            self.update_progress(f"‚ùå Dossier non trouv√©: {folder_path}")
            return False
        output_abs = os.path.abspath(self.output_folder) if self.output_folder else None
        if output_abs:
            norm_abs_path = os.path.normcase(abs_path)
            norm_output_path = os.path.normcase(output_abs)
            if norm_abs_path == norm_output_path or norm_abs_path.startswith(
                norm_output_path + os.sep
            ):
                self.update_progress(
                    f"‚ö†Ô∏è Impossible d'ajouter le dossier de sortie: {os.path.basename(folder_path)}"
                )
                return False
        with self.folders_lock:
            current_abs = (
                os.path.abspath(self.current_folder) if self.current_folder else None
            )
            existing_abs = [os.path.abspath(p) for p in self.additional_folders]
            if (current_abs and abs_path == current_abs) or abs_path in existing_abs:
                self.update_progress(
                    f"‚ìò Dossier d√©j√† en cours ou ajout√©: {os.path.basename(folder_path)}"
                )
                return False
            self.additional_folders.append(abs_path)
            folder_count = len(self.additional_folders)
        self.update_progress(
            f"‚úÖ Dossier ajout√© √† la file d'attente : {os.path.basename(folder_path)}"
        )
        self.update_progress(f"folder_count_update:{folder_count}")
        return True

    ################################################################################################################################################

    def _add_files_to_queue(self, folder_path):
        count_added = 0
        try:
            abs_folder_path = os.path.abspath(folder_path)
            # ---> AJOUTER CETTE LIGNE <---
            logger.debug(
                f"DEBUG [_add_files_to_queue]: Scanning absolute path: '{abs_folder_path}'"
            )
            # ------------------------------
            self.update_progress(
