                                        item_result_tuple[5],
                                    )
                                )
                                self._current_batch_paths.append(file_path)

                                if self.batch_size == 0:
                                    trigger = float("inf")
                                elif self.batch_size == 1 and getattr(
                                    self, "chunk_size", None
                                ):
                                    trigger = getattr(self, "chunk_size")
                                else:
                                    trigger = max(1, self.batch_size)
                                if (
                                    len(current_batch_items_with_masks_for_stack_batch)
                                    >= trigger
                                ):
                                    self.stacked_batches_count += 1
                                    num_in_batch = len(
                                        current_batch_items_with_masks_for_stack_batch
                                    )

                                    # 1. Stack the batch (classic SUM/W)
                                    stacked_np, hdr, wht_2d = self._stack_batch(
                                        current_batch_items_with_masks_for_stack_batch,
                                        self.stacked_batches_count,
                                        self.total_batches_estimated,
                                    )
                                    if stacked_np is None:
                                        current_batch_items_with_masks_for_stack_batch.clear()
                                        if getattr(self, "batch_size", 1) == 1:
                                            getattr(self, "_indices_cache", {}).clear()
                                        gc.collect()
                                    else:
                                        # 2. Ensure WCS on the stacked image
                                        (
                                            solved_path,
                                            _,
                                        ) = self._save_and_solve_classic_batch(
                                            stacked_np,
                                            wht_2d,
                                            hdr,
                                            self.stacked_batches_count,
                                        )
                                        batch_wcs = None
                                        try:
                                            batch_wcs = WCS(hdr, naxis=2)
                                            ensure_wcs_pixel_shape(
                                                batch_wcs,
                                                int(hdr.get("NAXIS2")),
                                                int(hdr.get("NAXIS1")),
                                            )
                                        except Exception:
                                            batch_wcs = None

                                        # 3. Accumulate if astrometric solve succeeded or not reprojecting
                                        if (
                                            not (
                                                self.reproject_between_batches
                                                or self.reproject_coadd_final
                                            )
                                            or self._last_classic_batch_solved
                                        ):
                                            self._combine_batch_result(
                                                stacked_np,
                                                hdr,
                                                wht_2d,
                                                batch_wcs=batch_wcs,
                                            )
                                        else:
                                            self.update_progress(
                                                "   -> Batch sans r\xe9solution ignor\xe9 pour le reproject",
                                                "WARN",
                                            )
                                        if hasattr(self.cumulative_sum_memmap, "flush"):
                                            self.cumulative_sum_memmap.flush()
                                        if hasattr(self.cumulative_wht_memmap, "flush"):
                                            self.cumulative_wht_memmap.flush()
                                        if not self.drizzle_active_session:
                                            self._update_preview_sum_w()

                                        # After accumulation, solve the cumulative stack
                                        if self.reproject_between_batches:
                                            (
                                                stack_img,
                                                solved_hdr,
                                            ) = self._solve_cumulative_stack()
                                            if (
                                                stack_img is not None
                                                and solved_hdr is not None
                                            ):
                                                reference_image_data_for_global_alignment = (
                                                    stack_img
                                                )
                                                reference_header_for_global_alignment = (
                                                    solved_hdr.copy()
                                                )
                                            else:
                                                reference_image_data_for_global_alignment = stacked_np.astype(
                                                    np.float32, copy=True
                                                )
                                                reference_header_for_global_alignment = (
                                                    hdr.copy()
                                                )
                                        else:
                                            reference_image_data_for_global_alignment = stacked_np.astype(
                                                np.float32, copy=True
                                            )
                                            reference_header_for_global_alignment = (
                                                hdr.copy()
                                            )

                                        current_batch_items_with_masks_for_stack_batch.clear()
                                        self._current_batch_paths = []
                                        self._save_partial_stack()
                                        if getattr(self, "batch_size", 1) == 1:
                                            getattr(self, "_indices_cache", {}).clear()
                                        gc.collect()

                            else:
