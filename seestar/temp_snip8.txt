                logger.debug(
                    f"  DEBUG QM [_save_final_stack]: Normalisation (0-1) basée sur percentiles. BP={bp_val:.4g}, WP={wp_val:.4g}."
                )
            else:
                max_overall = np.nanmax(data_for_percentile_norm)
                if max_overall > 1e-9:
                    final_image_normalized_for_cosmetics = (
                        data_for_percentile_norm / max_overall
                    )
                else:
                    final_image_normalized_for_cosmetics = np.zeros_like(
                        data_for_percentile_norm
                    )
                logger.debug(
                    "  DEBUG QM [_save_final_stack]: Normalisation (0-1) par max (peu de données/dynamique pour percentiles)."
                )

            final_image_normalized_for_cosmetics = np.clip(
                final_image_normalized_for_cosmetics, 0.0, 1.0
            )

        final_image_normalized_for_cosmetics = (
            final_image_normalized_for_cosmetics.astype(np.float32)
        )
        logger.debug(
            f"    Range après normalisation (0-1): [{np.nanmin(final_image_normalized_for_cosmetics):.3f}, {np.nanmax(final_image_normalized_for_cosmetics):.3f}]"
        )

        effective_image_count = self.images_in_cumulative_stack

        # data_after_postproc est la version 0-1 qui subira les post-traitements cosmétiques.
        data_after_postproc = final_image_normalized_for_cosmetics.copy()

        self.update_progress(
            f"  DEBUG QM [SaveFinalStack] data_after_postproc (AVANT post-traitements) - Range: [{np.nanmin(data_after_postproc):.4f}, {np.nanmax(data_after_postproc):.4f}]"
        )
        logger.debug(
            f"  DEBUG QM [SaveFinalStack] data_after_postproc (AVANT post-traitements) - Range: [{np.nanmin(data_after_postproc):.4f}, {np.nanmax(data_after_postproc):.4f}]"
        )

        # --- Début du Pipeline de Post-Traitement (identique à votre version précédente) ---
        # Ici nous n'implémentons que le Feathering et le Low WHT Mask pour
        # démontrer la connexion avec les réglages de l'onglet Expert.
        if (
            hasattr(self, "apply_feathering")
            and self.apply_feathering
            and final_wht_map_for_postproc is not None
        ):
            if _FEATHERING_AVAILABLE:
                self.update_progress("   [Feathering] Application au stack final...")
                data_after_postproc = feather_by_weight_map(
