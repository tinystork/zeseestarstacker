        optionally cropped and solved again before being combined with
        ``reproject_and_coadd``.  The clustering phase present in ZeMosaic is
        omitted here.
        """

        try:
            from seestar.enhancement.reproject_utils import (
                reproject_and_coadd,
                reproject_interp,
            )
            from seestar.core.reprojection import reproject_to_reference_wcs
        except Exception as e:
            self.update_progress(f"⚠️ Outils de reprojection indisponibles: {e}", "WARN")
            return False

        data_pairs = []
        weight_maps = []
        wcs_list = []
        headers = []

        crop_tiles = getattr(self, "apply_master_tile_crop", False)
        crop_frac = getattr(self, "master_tile_crop_percent_decimal", 0.0)
        for sci_path, _wht_paths in batch_files:
            if sci_path in getattr(self, "unsolved_classic_batch_files", set()):
                self.update_progress(
                    f"   -> Batch ignor\xe9 (non r\xe9solu) {sci_path}",
                    "WARN",
                )
                continue
            try:
                solved_ok = self._run_astap_and_update_header(sci_path)
                if not solved_ok:
                    self.update_progress(
                        f"   -> Batch ignor\xe9 (astrom\xe9trie \xe9chou\xe9e) {sci_path}",
                        "WARN",
                    )
                    self.unsolved_classic_batch_files.add(sci_path)
                    continue
                with fits.open(sci_path, memmap=False) as hdul:
                    data_cxhxw = hdul[0].data.astype(np.float32)
                    hdr = hdul[0].header

                if crop_tiles and crop_frac > 0.0:
                    dh = int(data_cxhxw.shape[1] * crop_frac)
                    dw = int(data_cxhxw.shape[2] * crop_frac)
                    if dh or dw:
                        end_h = -dh if dh else None
                        end_w = -dw if dw else None
                        data_cxhxw = data_cxhxw[:, dh:end_h, dw:end_w]
                        hdr["CRPIX1"] = hdr.get("CRPIX1", 0) - dw
                        hdr["CRPIX2"] = hdr.get("CRPIX2", 0) - dh
                        hdr["NAXIS1"] = data_cxhxw.shape[2]
                        hdr["NAXIS2"] = data_cxhxw.shape[1]
                        fits.PrimaryHDU(data=data_cxhxw, header=hdr).writeto(
                            sci_path, overwrite=True
                        )
                hdr = fits.getheader(sci_path)

                wcs = WCS(hdr, naxis=2)
                h = int(hdr.get("NAXIS2"))
                w = int(hdr.get("NAXIS1"))
