def renormalize_fits(
    fits_path: str,
    method: Literal["none", "max", "n_images"],
    n_images: int,
) -> None:
    """In-place renormalises a drizzle FITS stack."""
    log = logging.getLogger(__name__)
    m = (method or "none").lower()
    if m not in {"none", "max", "n_images"}:
        log.debug(f"renormalize_fits: unknown method '{method}', fallback to 'none'")
        m = "none"
    if m == "none":
        return
    try:
        with fits.open(fits_path, mode="update", memmap=False) as hdul:
            orig_dtype = hdul[0].data.dtype
            data = hdul[0].data.astype(np.float32)
            hdr = hdul[0].header
            wht = None
            wht_orig_dtype = None
            if (
                len(hdul) > 1
                and hdul[1].header.get("EXTNAME", "").strip().upper() == "WHT"
            ):
                wht_orig_dtype = hdul[1].data.dtype
                wht = hdul[1].data.astype(np.float32)
            if wht is not None:
                wht_max = float(np.max(wht)) if wht.size else 1.0
                wht_mean = float(np.mean(wht)) if wht.size else 1.0
            else:
                wht_max = float(hdr.get("DRZWHT_MAX", 1.0))
                wht_mean = float(hdr.get("DRZWHT_MEAN", 1.0))
            if m == "max":
                s = 1.0 / max(wht_max, 1.0)
            else:  # "n_images"
                denom = max(wht_mean, 1e-9)
                s = float(n_images) / denom
            data *= s
            if wht is not None:
                wht *= s
            if np.issubdtype(orig_dtype, np.integer):
                hdul[0].data = np.round(data).astype(orig_dtype)
            else:
                hdul[0].data = data.astype(orig_dtype)
            if wht is not None:
                if np.issubdtype(wht_orig_dtype, np.integer):
                    hdul[1].data = np.round(wht).astype(wht_orig_dtype)
                else:
                    hdul[1].data = wht.astype(wht_orig_dtype)
            hdr["RENORM"] = (s, "Flux renormalisation factor")
            hdr["RENORMMD"] = (m, "Renormalisation method")
            hdul.flush()
        log.debug(
            f"renormalize_fits: method={m} factor={s:.4g} applied to {os.path.basename(fits_path)}"
        )
    except Exception:
        log.exception("renormalize_fits failed")
        raise


try:
    from ..enhancement.stack_enhancement import apply_low_wht_mask  # NOUVEL IMPORT

    _LOW_WHT_MASK_AVAILABLE = True
    logger.debug("Import apply_low_wht_mask depuis stack_enhancement OK.")
except ImportError as e_low_wht:
    _LOW_WHT_MASK_AVAILABLE = False
    logger.error(
        "Échec import apply_low_wht_mask: %s",
        e_low_wht,
    )

    def apply_low_wht_mask(
        img, wht, percentile=5, soften_px=128, progress_callback=None
    ):  # Factice
        if progress_callback:
            progress_callback(
                "   [LowWHTMask] ERREUR: Fonction apply_low_wht_mask non disponible (échec import).",
                None,
            )
        else:
            logger.error("Fonction apply_low_wht_mask non disponible (échec import).")
        return img


# --- Optional Third-Party Imports (Post-processing related) ---
# Ces imports sont tentés globalement. Des flags indiquent leur disponibilité.
