import ast
import sys
from collections import defaultdict
from pathlib import Path


class DuplicateDefFinder(ast.NodeVisitor):
    """Walk the AST and collect duplicate function and class definitions.

    The finder records fully qualified names (``module.func`` or
    ``outer.inner``) for every class or function defined outside of a class.
    Methods defined inside classes are ignored so that constructs like
    multiple ``__init__`` methods in different classes do not trigger a
    duplicate warning.

    Attributes
    ----------
    defs : dict[str, list[int]]
        Maps each fully qualified definition name to the line numbers where it
        appears.
    scope : list[tuple[str, str]]
        Stack of ``("class"|"func", name)`` tuples describing the current
        traversal scope.  Used to build fully qualified names.
    """

    def __init__(self) -> None:
        self.defs: dict[str, list[int]] = defaultdict(list)
        self.scope: list[tuple[str, str]] = []

    # --- Visitors -----------------------------------------------------
    def visit_FunctionDef(self, node: ast.FunctionDef):
        self._maybe_add_function(node)

    def visit_AsyncFunctionDef(self, node: ast.AsyncFunctionDef):
        self._maybe_add_function(node)

    def visit_ClassDef(self, node: ast.ClassDef):
        # Record the class definition itself
        self._add(node.name, node.lineno)
        # Enter the class scope so nested definitions are qualified
        self.scope.append(("class", node.name))
        self.generic_visit(node)
        self.scope.pop()

    # -----------------------------------------------------------------
    def _add(self, name: str, lineno: int) -> None:
        """Add a definition under the current fully qualified name."""
        qualified = ".".join([n for _, n in self.scope] + [name])
        self.defs[qualified].append(lineno)

    def _maybe_add_function(self, node: ast.FunctionDef | ast.AsyncFunctionDef) -> None:
        """Record function definitions unless they are methods inside a class."""
        inside_class = any(t == "class" for t, _ in self.scope)
        if not inside_class:
            self._add(node.name, node.lineno)
        # Regardless of whether it was added, descend into the function to
        # collect nested definitions using it as part of the scope.
        self.scope.append(("func", node.name))
        self.generic_visit(node)
        self.scope.pop()

    # -----------------------------------------------------------------
    def duplicates(self) -> dict[str, list[int]]:
        """Return only names defined more than once."""
        return {n: lns for n, lns in self.defs.items() if len(lns) > 1}


# ----------------------------------------------------------------------
# Helper functions
# ----------------------------------------------------------------------

def find_duplicates(path: Path) -> dict[str, list[int]]:
    """Parse *path* and return duplicate defs.

    Parameters
    ----------
    path : Path
        Path to a Python source file.

    Returns
    -------
    dict[str, list[int]]
        Mapping of duplicate names to the list of line numbers where
        each duplicate was encountered.
    """

    try:
        source = path.read_text(encoding="utf-8")
    except UnicodeDecodeError:
        source = path.read_text(encoding="latin-1")

    tree = ast.parse(source, filename=str(path))
    finder = DuplicateDefFinder()
    finder.visit(tree)
    return finder.duplicates()


# ----------------------------------------------------------------------
# CLI
# ----------------------------------------------------------------------

def main(argv: list[str] | None = None) -> None:
    if argv is None:
        argv = sys.argv[1:]

    if not argv:
        print("Usage: python duplicate_definitions_finder.py <file_or_dir> [<file_or_dir> ...]")
        sys.exit(1)

    # Expand supplied paths (recursively list *.py inside directories)
    files: list[Path] = []
    for arg in argv:
        p = Path(arg)
        if p.is_dir():
            files.extend(p.rglob("*.py"))
        else:
            files.append(p)

    any_duplicates = False
    for file in files:
        dupes = find_duplicates(file)
        if dupes:
            any_duplicates = True
            print(f"{file}:")
            for name, lines in dupes.items():
                locs = ", ".join(map(str, sorted(lines)))
                print(f"  {name} → {len(lines)} fois (lignes {locs})")
    if not any_duplicates:
        print("✅ Aucun doublon trouvé !")


if __name__ == "__main__":
    main()
