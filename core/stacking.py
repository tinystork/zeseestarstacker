"""
Module pour l'empilement progressif des images astronomiques.
"""
import os
import numpy as np
from astropy.io import fits
import cv2
import gc
import time
from tqdm import tqdm

from .image_processing import (
    load_and_validate_fits,
    save_fits_image,
    save_preview_image
)
from .utils import apply_denoise

class ProgressiveStacker:
    """
    Classe pour l'empilement progressif des images astronomiques.
    Cette classe permet d'empiler des images par lots, en sauvegardant 
    les r√©sultats interm√©diaires et en nettoyant les fichiers align√©s
    pour √©conomiser de l'espace.
    """
    def __init__(self):
        """Initialise le stacker avec des valeurs par d√©faut."""
        self.stacking_mode = "kappa-sigma"  # Mode d'empilement par d√©faut
        self.kappa = 2.5  # Valeur kappa par d√©faut pour l'empilement kappa-sigma
        self.batch_size = 0  # 0 signifie auto-d√©tection bas√©e sur la m√©moire disponible
        self.stop_processing = False
        self.progress_callback = None
        self.denoise = False  # Option pour appliquer un d√©bruitage au stack final
    
    def set_progress_callback(self, callback):
        """D√©finit la fonction de rappel pour les mises √† jour de progression."""
        self.progress_callback = callback
    
    def update_progress(self, message, progress=None):
        """Met √† jour la progression en utilisant le callback si disponible."""
        if self.progress_callback:
            self.progress_callback(message, progress)
        else:
            print(message)
    
    def estimate_optimal_batch_size(self, input_folder, target_memory_usage=0.7):
        """
        Estime la taille optimale des lots en fonction de la m√©moire disponible
        et de la taille des images.
        
        Args:
            input_folder (str): Chemin vers le dossier contenant les images
            target_memory_usage (float): Pourcentage cible d'utilisation de la m√©moire (0.0-1.0)
            
        Returns:
            int: Taille de lot estim√©e
        """
        try:
            import psutil
            
            # Obtenir la m√©moire disponible (en octets)
            available_memory = psutil.virtual_memory().available
            usable_memory = available_memory * target_memory_usage
            
            # Trouver un fichier exemple pour estimer la taille
            files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.fit', '.fits'))]
            if not files:
                self.update_progress("‚ö†Ô∏è Aucun fichier FITS trouv√© pour l'estimation de la taille des lots.")
                return 10  # Valeur par d√©faut si aucun fichier trouv√©
            
            sample_path = os.path.join(input_folder, files[0])
            img = load_and_validate_fits(sample_path)
            
            # Une image trait√©e peut prendre jusqu'√† 4x plus de m√©moire
            # (versions originale, d√©bayeris√©e, normalis√©e, align√©e)
            single_image_size = img.nbytes * 4
            
            # Calculer combien d'images peuvent tenir en m√©moire (avec un facteur de s√©curit√©)
            safety_factor = 2.0  # Pour tenir compte des op√©rations suppl√©mentaires
            estimated_batch = int(usable_memory / (single_image_size * safety_factor))
            
            # Limites raisonnables pour la taille des lots
            estimated_batch = max(3, min(50, estimated_batch))
            
            self.update_progress(
                f"üß† M√©moire disponible: {available_memory / (1024**3):.2f} Go, "
                f"Taille estim√©e d'une image: {single_image_size / (1024**2):.2f} Mo, "
                f"Taille de lot estim√©e: {estimated_batch}"
            )
            
            return estimated_batch
            
        except Exception as e:
            self.update_progress(f"‚ö†Ô∏è Erreur lors de l'estimation de la taille des lots: {e}")
            return 10  # Valeur par d√©faut en cas d'erreur
    
    def combine_stacks(self, stack_files, output_file, stacking_mode="mean", denoise=False):
        """
        Combine plusieurs fichiers de stack interm√©diaires en un stack final.
        
        Args:
            stack_files (list): Liste des chemins vers les fichiers de stack interm√©diaires
            output_file (str): Chemin du fichier de sortie pour le stack final
            stacking_mode (str): M√©thode d'empilement √† utiliser
            denoise (bool): Appliquer un d√©bruitage au stack final
            
        Returns:
            bool: True si r√©ussi, False sinon
        """
        if not stack_files:
            self.update_progress("‚ö†Ô∏è Aucun fichier de stack interm√©diaire √† combiner.")
            return False
        
        try:
            self.update_progress(f"üîÑ Combinaison de {len(stack_files)} stacks interm√©diaires...")
            
            # Charger tous les stacks interm√©diaires
            stacks = []
            for stack_file in stack_files:
                try:
                    stack_data = load_and_validate_fits(stack_file)
                    
                    # S'assurer que les dimensions sont correctes
                    if stack_data.ndim == 3 and stack_data.shape[0] == 3:
                        # Convertir de 3xHxW √† HxWx3
                        stack_data = np.moveaxis(stack_data, 0, -1)
                    
                    stacks.append(stack_data)
                except Exception as e:
                    self.update_progress(f"‚ö†Ô∏è Erreur lors du chargement du stack {stack_file}: {e}")
            
            if not stacks:
                self.update_progress("‚ùå Aucun stack interm√©diaire valide trouv√©.")
                return False
            
            # Combiner les stacks selon la m√©thode choisie
            if stacking_mode == "mean":
                final_stack = np.mean(stacks, axis=0)
            elif stacking_mode == "median":
                final_stack = np.median(stacks, axis=0)
            else:
                # Par d√©faut, utiliser la moyenne pour les autres m√©thodes
                final_stack = np.mean(stacks, axis=0)
            
            # Appliquer le d√©bruitage si demand√©
            if denoise:
                self.update_progress("üßπ Application du d√©bruitage au stack final...")
                try:
                    final_stack = apply_denoise(final_stack, strength=5)
                except Exception as e:
                    self.update_progress(f"‚ö†Ô∏è √âchec du d√©bruitage: {e}")
            
            # Cr√©er un en-t√™te FITS
            hdr = fits.Header()
            hdr['STACKED'] = True
            hdr['STACKTYP'] = 'combined-' + stacking_mode
            hdr['NSTACKS'] = len(stacks)
            if denoise:
                hdr['DENOISE'] = True
            
            # Sauvegarder le stack final
            save_fits_image(final_stack, output_file, header=hdr, overwrite=True)
            
            # Sauvegarder une pr√©visualisation PNG
            preview_file = os.path.splitext(output_file)[0] + ".png"
            save_preview_image(final_stack, preview_file)
            
            self.update_progress(f"‚úÖ Stack final cr√©√© avec succ√®s: {output_file}")
            return True
            
        except Exception as e:
            self.update_progress(f"‚ùå Erreur lors de la combinaison des stacks: {e}")
            return False

    def process_aligned_images(self, input_folder, output_folder, remove_aligned=True):
        """
        Traite les images align√©es par lots, en empilant chaque lot 
        et en supprimant les images align√©es apr√®s traitement.
        
        Args:
            input_folder (str): Dossier contenant les images align√©es
            output_folder (str): Dossier de sortie pour les stacks
            remove_aligned (bool): Supprimer les images align√©es apr√®s empilement
            
        Returns:
            list: Liste des fichiers de stack interm√©diaires cr√©√©s
        """
        self.stop_processing = False
        
        # Cr√©er le dossier de sortie s'il n'existe pas
        os.makedirs(output_folder, exist_ok=True)
        
        # Estimer la taille optimale des lots si non sp√©cifi√©e
        if self.batch_size <= 0:
            self.batch_size = self.estimate_optimal_batch_size(input_folder)
        
        # R√©cup√©rer la liste des fichiers align√©s
        aligned_files = [f for f in os.listdir(input_folder) 
                        if f.lower().endswith(('.fit', '.fits')) 
                        and not f.startswith('reference_image')]
        
        if not aligned_files:
            self.update_progress("‚ùå Aucune image align√©e trouv√©e.")
            return []
        
        total_files = len(aligned_files)
        self.update_progress(f"üîç {total_files} images align√©es trouv√©es pour l'empilement.")
        
        # Trier les fichiers pour s'assurer qu'ils sont trait√©s dans l'ordre
        aligned_files.sort()
        
        stack_files = []
        start_time = time.time()
        
        # Traiter les images par lots
        for batch_idx, batch_start in enumerate(range(0, total_files, self.batch_size)):
            if self.stop_processing:
                self.update_progress("‚õî Traitement arr√™t√© par l'utilisateur.")
                break
            
            batch_end = min(batch_start + self.batch_size, total_files)
            batch_files = aligned_files[batch_start:batch_end]
            
            batch_progress = batch_start * 100 / total_files
            self.update_progress(
                f"üöÄ Traitement du lot {batch_idx + 1}/{(total_files-1)//self.batch_size + 1} "
                f"(images {batch_start+1} √† {batch_end})...", 
                batch_progress
            )
            
            # Nom du fichier de stack pour ce lot
            batch_stack_file = os.path.join(
                output_folder, 
                f"stack_intermediate_{batch_idx+1:03d}_{self.stacking_mode}.fit"
            )
            
            # Empiler les images de ce lot
            success = self._stack_batch(
                input_folder, 
                batch_files, 
                batch_stack_file,
                batch_idx,
                total_files,
                start_time
            )
            
            if success:
                stack_files.append(batch_stack_file)
                
                # Suppression des images align√©es trait√©es si demand√©
                if remove_aligned:
                    for f in batch_files:
                        try:
                            os.remove(os.path.join(input_folder, f))
                        except Exception as e:
                            self.update_progress(f"‚ö†Ô∏è Impossible de supprimer {f}: {e}")
                    
                    # Mise √† jour de la progression apr√®s nettoyage
                    self.update_progress(
                        f"üßπ Images align√©es du lot {batch_idx + 1} supprim√©es pour √©conomiser de l'espace.",
                        batch_progress + (self.batch_size * 100 / total_files) * 0.1
                    )
        
        # Cr√©ation du stack final combinant tous les stacks interm√©diaires
        if stack_files and len(stack_files) > 1:
            final_stack_file = os.path.join(output_folder, f"stack_final_{self.stacking_mode}.fit")
            self.combine_stacks(stack_files, final_stack_file, self.stacking_mode, self.denoise)
            stack_files.append(final_stack_file)  # Ajouter le stack final √† la liste
        
        return stack_files
    
    def _stack_batch(self, input_folder, batch_files, output_file, batch_idx, total_files, start_time):
        """
        Empile un lot d'images et sauvegarde le r√©sultat.
        
        Args:
            input_folder (str): Dossier contenant les images align√©es
            batch_files (list): Liste des fichiers √† empiler
            output_file (str): Chemin du fichier de sortie
            batch_idx (int): Index du lot
            total_files (int): Nombre total de fichiers
            start_time (float): Heure de d√©but du traitement
            
        Returns:
            bool: True si r√©ussi, False sinon
        """
        try:
            # Charger toutes les images du lot
            images = []
            for i, file in enumerate(batch_files):
                try:
                    file_path = os.path.join(input_folder, file)
                    img = load_and_validate_fits(file_path)
                    
                    # Si l'image est 3D avec la premi√®re dimension comme canaux (3xHxW), 
                    # convertir en HxWx3
                    if img.ndim == 3 and img.shape[0] == 3:
                        img = np.moveaxis(img, 0, -1)
                    
                    images.append(img)
                    
                    # Mise √† jour de la progression
                    file_idx = batch_idx * self.batch_size + i
                    percent_done = file_idx * 100 / total_files
                    elapsed_time = time.time() - start_time
                    
                    if file_idx > 0:
                        time_per_image = elapsed_time / file_idx
                        remaining_images = total_files - file_idx
                        estimated_time_remaining = remaining_images * time_per_image
                        hours, remainder = divmod(int(estimated_time_remaining), 3600)
                        minutes, seconds = divmod(remainder, 60)
                        time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
                        
                        self.update_progress(
                            f"üìä Chargement de {file}... ({file_idx+1}/{total_files}) "
                            f"Temps restant estim√©: {time_str}",
                            percent_done
                        )
                    else:
                        self.update_progress(
                            f"üìä Chargement de {file}... ({file_idx+1}/{total_files})",
                            percent_done
                        )
                        
                except Exception as e:
                    self.update_progress(f"‚ö†Ô∏è Erreur lors du chargement de {file}: {e}")
            
            if not images:
                self.update_progress(f"‚ùå Aucune image valide trouv√©e dans le lot {batch_idx+1}.")
                return False
            
            # Empiler les images selon la m√©thode choisie
            self.update_progress(f"üßÆ Empilement du lot {batch_idx+1} avec la m√©thode '{self.stacking_mode}'...")
            
            if self.stacking_mode == "mean":
                stacked_image = np.mean(images, axis=0)
            elif self.stacking_mode == "median":
                stacked_image = np.median(np.stack(images, axis=0), axis=0)
            elif self.stacking_mode in ["kappa-sigma", "winsorized-sigma"]:
                stacked_image = self._kappa_sigma_stack(images)
            else:
                # Fallback sur la moyenne si m√©thode non reconnue
                self.update_progress(f"‚ö†Ô∏è M√©thode d'empilement '{self.stacking_mode}' non reconnue, utilisation de 'mean'.")
                stacked_image = np.mean(images, axis=0)
            
            # Cr√©er un en-t√™te FITS
            hdr = fits.Header()
            hdr['STACKED'] = True
            hdr['STACKTYP'] = self.stacking_mode
            hdr['NIMAGES'] = len(images)
            hdr['BATCHIDX'] = batch_idx + 1
            
            if self.stacking_mode in ["kappa-sigma", "winsorized-sigma"]:
                hdr['KAPPA'] = self.kappa
            
            # Sauvegarder le stack interm√©diaire
            save_fits_image(stacked_image, output_file, header=hdr, overwrite=True)
            
            # Sauvegarder une pr√©visualisation PNG
            preview_file = os.path.splitext(output_file)[0] + ".png"
            save_preview_image(stacked_image, preview_file)
            
            self.update_progress(f"‚úÖ Stack interm√©diaire {batch_idx+1} cr√©√©: {output_file}")
            
            # Lib√©rer la m√©moire
            del images
            gc.collect()
            
            return True
            
        except Exception as e:
            self.update_progress(f"‚ùå Erreur lors de l'empilement du lot {batch_idx+1}: {e}")
            return False
    
    def _kappa_sigma_stack(self, images):
        """
        Applique la m√©thode d'empilement kappa-sigma ou winsorized-sigma.
        
        Args:
            images (list): Liste des images √† empiler
            
        Returns:
            numpy.ndarray: Image empil√©e
        """
        # Convertir la liste d'images en un tableau 3D/4D
        stack = np.stack(images, axis=0)
        
        # Calculer la moyenne et l'√©cart-type
        mean = np.mean(stack, axis=0)
        std = np.std(stack, axis=0)
        
        if self.stacking_mode == "kappa-sigma":
            # Pour kappa-sigma, on cr√©e des masques pour chaque image
            sum_image = np.zeros_like(mean)
            mask_sum = np.zeros_like(mean)
            
            for img in stack:
                deviation = np.abs(img - mean)
                mask = deviation <= (self.kappa * std)
                sum_image += img * mask
                mask_sum += mask
            
            # √âviter la division par z√©ro
            mask_sum = np.maximum(mask_sum, 1)
            result = sum_image / mask_sum
            
        elif self.stacking_mode == "winsorized-sigma":
            # Pour winsorized-sigma, on remplace les valeurs extr√™mes
            upper_bound = mean + self.kappa * std
            lower_bound = mean - self.kappa * std
            
            # Appliquer les limites √† chaque image
            clipped_stack = np.clip(stack, lower_bound, upper_bound)
            
            # Calculer la moyenne des images recadr√©es
            result = np.mean(clipped_stack, axis=0)
        
        return result
